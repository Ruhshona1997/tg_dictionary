# В google colab добавить: !pip install pyTelegramBotAPI
# Чтобы добавить новое слово — нужно его прописать в массиве DEFINITOINS на 11 строчке
# Важно все новые аббривиатуры в коде писать только с маленьких букв
# Пользователь в телеграм может писать и с большой и с маленькой — код всегда приводит к строчным

from telebot import TeleBot, types


bot = TeleBot(token='5704928998:AAH7_gyRvgdQ5-vfRxrzcguxUtoAhBTsMwA', parse_mode='html') # создание бота
# словарь с определениями и аббревиатурами, которые знает бот
# в формате:
# 'ключевая фраза': 'соответствующее ей определение'
DEFINITOINS = {
    'регресс': 'Проверить что новый функционал не сломал существующий',
    'qa': 'Проактивная работа по построению процесса',
    'testing':'Проверка строго по документации',
    'qc': 'Документация + негативные сценарии',
    'qa': 'Проактивная работа по построению процесса',
    'тестирование':'Поиск разницы между ожидаемым и фактическим поведением',
    'цель тестирования': 'Поиск багов на ранних этапах',
    'двухуровневая схема': 'Двухуровневая схема – клиент-сервер',
    'трехуровневая схема': 'Трехуровневая схема – клиент-сервер-база данных',
    'клиент-сервер': 'Клиент – сервер – это вычислительная или сетевая архитектура, в которой задания или сетевая нагрузка распределены между поставщиками услуг (серверами) и заказчиками услуг (клиентами). Фактически клиент и сервер – это ПО. Обычно эти программы расположены на разных вычислительных машинах и взаимодействуют между собой с помощью сетевых протоколов. Но клиент и сервер могут располагаться на одной машине. Самый распространённый протокол HTTP',
    'клиент': 'Визуализация сайта/приложения, то, с чем мы взаимодействуем. Языки клиента: web - JavaScript, ios - swift, android - kotlin, ios+android = flutter',
    'бекенд':'Логика сайта/приложения. Языки бекенда: c++, c#, python, java, scala, go, javaScript',
    'база данных': 'Хранилище данных клиента. Языки базы данных: Postgres, MySql, Redis, MongoDB',
    'http': 'HTTP (Hyper Text Transfer Protocol) – это протокол прикладного уровня, в котором описаны правила передачи данных в интернете. Он помогает браузеру загружать веб-страницы, а серверу – получить информацию, которую пользователь ввёл на сайте',
    'запрос': 'HTTP (Hyper Text Transfer Protocol) – это протокол прикладного уровня, в котором описаны правила передачи данных в интернете. Он помогает браузеру загружать веб-страницы, а серверу – получить информацию, которую пользователь ввёл на сайте. HTTP также называют: запрос, ручка, метод, эндпоинт, хендлер',
    'ручка': 'HTTP (Hyper Text Transfer Protocol) – это протокол прикладного уровня, в котором описаны правила передачи данных в интернете. Он помогает браузеру загружать веб-страницы, а серверу – получить информацию, которую пользователь ввёл на сайте. HTTP также называют: запрос, ручка, метод, эндпоинт, хендлер',
    'метод':'HTTP (Hyper Text Transfer Protocol) – это протокол прикладного уровня, в котором описаны правила передачи данных в интернете. Он помогает браузеру загружать веб-страницы, а серверу – получить информацию, которую пользователь ввёл на сайте. HTTP также называют: запрос, ручка, метод, эндпоинт, хендлер',
    'эндпоинт': 'HTTP (Hyper Text Transfer Protocol) – это протокол прикладного уровня, в котором описаны правила передачи данных в интернете. Он помогает браузеру загружать веб-страницы, а серверу – получить информацию, которую пользователь ввёл на сайте. HTTP также называют: запрос, ручка, метод, эндпоинт, хендлер',
    'хендлер': 'HTTP (Hyper Text Transfer Protocol) – это протокол прикладного уровня, в котором описаны правила передачи данных в интернете. Он помогает браузеру загружать веб-страницы, а серверу – получить информацию, которую пользователь ввёл на сайте. HTTP также называют: запрос, ручка, метод, эндпоинт, хендлер',
    'https':'HTTPS (Hyper Text Transfer Protocol Secure) – это тот же протокол, но с надстройкой безопасности.По умолчанию браузеры общаются с сервером по HTTP. Чтобы соединение стало безопасным, владелец сайта должен установить SSL-сертификат на хостинг. Когда владелец сайта устанавливает SSL-сертификат, в адресной строке браузера появляется значок замка и HTTP меняется на HTTPS. Это значит, что на сайте безопасно вводить личную информацию',
    'ip': 'IP (Internet Protocol) – это протокол передачи, который первым объединил отдельные компьютеры в единую сеть. Он не является надёжным, т.е. не подтверждает доставку пакетов получателю и не контролирует целостность данных. По протоколу IP передача данных осуществляется без установки соединения. Основная задача этого протокола – определение пути следования данных по узлам сети',
    'tpc': 'TCP (Transmission Control Protocol) – это надёжный транспортный протокол, в результате которого при передаче файлов есть гарантия того, что информация доходит до клиента. Если же информация не доходит, то происходит повторная отправка информации',
    'upd user':'UPD User (Datagram Protocol) – это протокол, в котором не нужно убеждаться в том, что информация дошла. Т.е. это происходит непрерывным потоком, информация передаётся и нет никаких механизмов, которые бы говорили о том, что информация гарантированно попала клиенту либо серверу',
    'ftp': 'FTP (File Transfer Protocol) – это протокол передачи файлов по сети, появившийся в 1971 году задолго до HTTP и TCP/IP, благодаря чему является одним из старейших прикладных протоколов. На текущий момент этим протоколом пользуются при удалённом доступе к хостингам. FTP является надёжным протоколом, поэтому гарантирует передачу данных.                            Этот протокол работает по принципу клиент-серверной архитектуры. Пользователь проходит аутентификацию (хотя в отдельных случаях может подключаться анонимно) и получает доступ к файловой системе сервера',
    'dns': 'DNS (Domain Name System) – это технология, которая позволяет браузеру найти запрошенный сайт по его имени. Принцип работы DNS похож на поиск и вызов контактов из телефонной книги смартфона. Ищем имя, нажимаем “позвонить”, и телефон соединяет нас с нужным абонентом. Понятно, что смартфон в ходе звонка не использует само имя человека, вызов возможен только по номеру телефона. Если вы внесёте имя без номера телефона, позвонить человеку не сможете. Так и с сайтом. Каждому имени сайта соответствует набор цифр формата 000.000.000.000. Этот набор называется IP-адресом. Когда пользователь вводит в адресной строке браузера имя сайта, компьютер запрашивает IP-адрес этого сайта на специальном DNS-сервере и после получения корректного ответа открывает нам сайт',
    'ssh':'SSH (Secure SHell) – это протокол для управления операционной системой с использованием TCP. В SSH шифруется весь трафик, причём с возможностью выбора алгоритма шифрования. В основном это нужно для передачи паролей и другой важной информации. Также SSH позволяет обрабатывать любые другие протоколы передачи. Это значит, что кроме удалённого управления компьютером, через протокол можно пропускать любые файлы или даже аудио/видео поток. SSH часто применяется при работе с хостингами, когда клиент может удалённо подключиться к серверу и работать уже оттуда',
    'тонкий клиент': 'Тонкий клиент – это компьютер или программа-клиент в сетях с клиент-серверной архитектурой, которая переносит всё или большую часть задач по обработке информации на сервер. Примером тонкого клиента может быть браузер, который используется для работы с веб-приложениями. Он тонкий, потому что вся основная бизнес-логика, все вычислительные мощности расположены на компьютере сервера, а клиент-простое программное обеспечение, которое помогает отправлять запросы на сервер',
    'толстый клиент': 'Толстый клиент – это такое приложение, которое обеспечивает расширенную функциональность независимо от центрального сервера. Часто сервер в данном случае является лишь хранилищем данных, а вся работа по обработке данных приносится на машину клиента. Например, 1С, онлайн игры',
    'веб-сайт':'Веб-сайт – это коллекция веб-страниц, связанных между собой какими-либо способами. Имеет простую архитектуру на основе HTML-кода, содержат текстовые файлы, картинки, музыку и т.д..  Например новостные, кулинарные, погода и т.д. Сайты не предоставляют возможности взаимодействия с программой, пользователь не имеет доступа для размещения своей информации, кроме как заполнение форм',
    'веб-приложение': 'Веб-приложение – это клиент-серверное приложение, в котором клиент взаимодействует с веб-сервером при помощи браузера (это интерактивные компьютерные приложения, которые специально разрабатываются для сети интернет и позволяет пользователям вводить, получать и манипулировать данными с помощью взаимодействия). Веб-приложения могут быть встроены в веб-страницы, либо сами веб страницы могут являться веб-приложениями. Они используют имя пользователя и пароль для аутентификации. Позволяют создавать контент, обмениваться сообщениями и т.д. Благодаря веб-приложениям пользователь может взаимодействовать с веб-страницами, вводить какие-то данные. Например Youtube, Facebook, VK и т.д.',
    'веб-сервис': 'Веб-сервис – Это программа, которая организует взаимодействие между сайтами. Информация с одного портала передается на другой. Веб ориентированная технология, которая позволяет программам общаться между собой с помощью форматов XML и JSON по средствам протокола SOAP и архитектурного стиля REST. Регистрация на каких-то сайтах с помощью социальных сетей происходит с помощью Api',
    'soap': 'SOAP (Simple object access protocol) – это протокол обмена структурированными сообщениями в распределённой вычислительной среде. Этот протокол используется для обмена произвольными сообщениями в формате XML. Так же SOAP может использоваться с любым протоколом прикладного уровня (http, ftp, https)',
    'xsd': 'XSD (XML Screma definition) - язык описания структуры XML – документа и типы данных, которые там могут храниться.',
    'xml':'XML (eXtensible Markup Language) – это расширенный язык разметки, который хранит в себе некоторую информацию и с помощью него эту информацию можно передавать при общении веб-сервисов',
    'rest': 'REST (Representational state transfer) – это архитектурный стиль, к нему не применяются жёсткие правила (он не правилозависимый). Он описывает структуру веб-сервиса. В его написании используется JSON',
    'json': 'JSON (Java Script Object Notation) – это текстовый формат обмена данными, основанный на JavaScript',
    'restful': 'RESTful – это характеристика веб-сервисов. Это такие веб-сервисы, которые отвечают требованиям REST',
    'wsdl': 'WSDL (Web Services Description Language) описывает структуру веб-сервиса ( сообщения, заголовки и события, свойственные для веб-сервиса). Он обязателен для SOAP протокола. Этот файл облегчает работу в тестировании.',
    'верификация':'Верификация – это процесс оценки системы, чтобы понять, удовлетворяют ли результаты текущего этапа разработки условиям, которые были сформулированы в его начале. Это статическая проверка без запуска кода, которая проходит до валидации',
    'валидация': 'Валидация – это определение соответствия разрабатываемого ПО ожиданиям и потребностям пользователя, его требованиям к системе. Этот процесс включает в себя запуск кода',
    'smoke': 'Выборка самых критичных кейсов',
    'смоук': 'Выборка самых критичных кейсов',
    'санитарное тестирование': 'Узконаправленная проверка достаточная для того чтобы убедится, что конкретная функция работает в соответствии с требованиями ',
    're-test': 'Проверка результата работы над багом',
    'белый ящик': 'Метод БЕЛОГО ЯЩИКА (тестирование того, что написано в задаче). Он предполагает что внутренняя структура, её устройство и реализация известны тестировщику',
    'черный ящик': ' Метод ЧЁРНОГО ЯЩИКА (тестирование регрессом). Мы не знаем, как устроена тестируемая система и работа ведётся исключительно с внешними интерфейсами системы, вообще не зная программный код. Это тестирование GUI (графического интерфейса)',
    'серый ящик': 'Метод СЕРОГО ЯЩИКА. Известны только некоторые особенности тестируемой системы. Это комбинация чёрного и белого ящика.',
    'функциональное тестирование':'Тестирование функциональностей, проверка логики (что как будет работать)',
    'стресс тестирование': 'Реакция на резкий всплеск нагрузки, когда мы даём гигантскую нагрузку, больше чем можем выдержать, секунд на 15-30',
    'инсталяционное тестирование': 'Проверка на устанавливаемость, обновляемость и удаляемость приложения',
    'конфигурационное тестирование': 'специальный вид тестирования, направленный на проверку работы программного обеспечения при различных конфигурациях системы (заявленных платформах, поддерживаемых драйверах, при различных конфигурациях компьютеров и т.д.)',
    'интеграционное тестирование': 'Интеграционное тестирование, оно же e2e-тестирование, подразумевает комплексное тестирование модулей через интерфейс приложения. Применительно к Angular приложению e2e тесты используются для проверки корректности взаимодействия между собой компонентов, которые в совокупности представляют функциональную единицу',
    'ad-hoc тестирование':'Представляет собой тестирование без использования каких-либо спецификаций, планов и тест-кейсов. Это импровизация. Проводится на самых ранних этапах. ',
    'исследовательское тестирование': 'Не требует написания тест-кейсов, но подразумевает что каждый последующий тест выбирается на основании предыдущего.',
    'сценарное тестирование': 'Тестирование по предварительно написанным тест-кейсам',
    'статическое тестирование': 'Тип тестирования, который предполагает, что программный не код во время тестирования будет выполняться. Оно начинается на ранних этапах жизненного цикла ПО и является частью процесса верификации. Большинство статических форм могут быть использованы для документации, включая вычитку кода, инспекцию проектной документации, функциональной спецификации и требований',
    'динамическое тестирование': 'Тип тестирования, который предполагает запуск программного кода. Таким образом анализируется поведение программы во время её работы. Для выполнения динамического тестирования необходимо чтобы тестируемый программный код был написан, скомпилирован и запущен. При этом может выполняться проверка внешних параметров работы программы: загрузка процессора, использование памяти, время отклика и т.д. – то есть её производительность',
    '200':'OK – всё прошло успешно как на стороне сервера, так и на стороне клиента',
    '204': 'No Content – сервер успешно обработал запрос. Нет содержимого для ответа на запрос, но заголовки ответа, которые могут быть полезны, присылаются',
    '301':'Moved Permanently – клиент обратился к какой-то странице, но она перемещена и находится по новому адресу. Сервер всё это смог переварить и в хедере вернул новый адрес.',
    'not modified': 'используется для кэширования. Этот ответ значит, что запрошенный ресурс не был изменён. Таким образом, клиент может продолжать использовать кэшированную версию ответа',
    '400': 'Bad Request – запрос был составлен неверно и сервер не смог его обработать',
    '401': 'Unauthorized (Неавторизированно) – для получения запроса нужна аутентификация. Система ругается, если ввели неправильный логин или пароль',
    '403':'Forbidden – у клиента нет прав доступа к содержимому, поэтому сервер отказывается дать надлежащий ответ',
    '404': 'Not Found – сервер не может найти запрашиваемый ресурс',
    '500': 'Internal Server Error (Внутренняя ошибка сервера) - указывает на то, что сервер столкнулся с неожиданной ошибкой, которая помешала ему выполнить запрос',
    '501': 'Not Implemented (Не выполнено) – метод запроса не поддерживается сервером и не может быть обработан',
    '503': 'Service Unavailable (Сервер недоступен) – сервер не готов обрабатывать запрос. Зачастую причинами являются отключение сервера или то, что он перегружен',
    '504':'Gateway Timeout – указывает что сервер, действуя как шлюз, не может получить ответ вовремя',
    'url': 'URL (Uniform Resource Locator) – это уникальный адрес сайта в сети, который определяет его место нахождения в сети',
    'urn': 'URN (Uniform Resource Name) – это неизменяемая последовательность символов, определяющая только имя некоторого ресурса. Имя определяет только название самого ресурса, но не говорит как к нему подключаться',
    'uri':'URI (Uniform Resource Identifier) – это обобщённое понятие множества идентификаций ресурса, которое включает как URL и URN, и может включать их по отдельности или всё вместе',
    'ip адрес': 'IP адрес – это уникальный сетевой адрес узла в компьютерной сети, построенный по протоколу IP (Internet Protocol)',
    'мак-адрес': 'MAK-адрес – это физический адрес устройства. Он прописывается при производстве сетевой карты. Считаются все устройства, подключённые к компьютеру и которые тоже могут выходить в сеть (например, принер, сканер, роутер и т.д.)',
    'кэш': 'Данные, которые загружаются с компьютера для того, чтобы упростить и ускорить работу на тех сайтах, которые посещались ранее',
    'cookie': 'Временные файлы, которые хранятся на жёстком диске компьютера пользователя, но они служат для хранения персональных данных пользователя. Например, логин, пароль, предпочтения по рекламе и т.д.',
    'curl':'cURL (Client URL) – полностью укомплектованный запрос. Это инструмент для передачи данных с сервера или на него. Команда предназначена для работы без взаимодействия с пользователем',
    'протокол': 'Протокол – это набор правил передачи информации, т.е. с помощью протоколов мы регламентируем то, как наша информация будет передаваться в сети интернет',
    'get': 'Этот метод характеризуют запросы информации от сервера, т.е. клиент отправляет информацию и запрашивает её от сервера. Если проще, GET запрашивает данные из указанного ресурса',
    'post':'Здесь происходит отправка полезной нагрузки (данных) на сервер, т.е. основная часть (payload) в теле запроса, которая отправляется на сервер. Если проще, POST – отправка данных для обработки в указанный ресурс',
    'put': 'Отправляется какая-то информация на сервер и обычно она используется для того, чтобы создать какой-то объект на сервере. Если проще, PUT загружает представление заданного URI',
    'delete': 'Удаляет данные или указанные ресурсы с сервера или сервера БД',
    'connect':'Преобразует подключение запроса к прозрачному туннелю TCP/IP',
    'options': 'Возвращает HTTP-методы, поддерживаемые сервером',
    'head': 'То же самое, что и GET, но возвращает только заголовки HTTP, а не тело документа',
    'html': 'HTML (Hyper Text Markup Language) – это язык разметки, который используется для визуального и смыслового структурирования web-контента. Он говорит браузеру о том, какие элементы должны быть на странице. С помощью HTML прописываются текстовые блоки, информацию в них и как они должны отображаться на странице, т.е. верстаем сайт. Можно править шрифты, добавлять картинки и т.д. Язык HTML не является языком программирования, это подвид XTML (расширенный язык разметки, и он используется для тестирования API, прописывается в SOAP протоколах).  Единица информации в HTML – это тэг, который обрамлён скобками (<>)',
    'css': 'CSS (Cascading Style Sheets) – это формальный язык описания внешнего вида документа, который написан на HTML. Это то, как должны выглядеть элементы на странице. Он может задаваться в трёх разных местах:                                                                                                                                            Внутри HTML документа                                                                                                      <style>xxxxxxxx</style> - внутри этого тэга будет расписан, например, размер шрифта, его цвет, расположение элемента на странице. Всё это можно указывать внутри тэга style.                                        Внутри атрибута                                                                                                                                         <img style=”background-color:black;”/> - здесь используем атрибут style внутри тэга.                       Внутри отдельного документа                                                                                                           style.css',
    'javascript': 'JavaScript – это язык программирования, который позволяет вам создать динамически обновляемый контент, управляет мультимедиа, анимирует изображения и т.д.',
    'gui тестирование':'Это процесс тестирования графического пользовательского интерфейса. Проверяется общий вид приложения и в отдельности формы, расположенные на странице',
    'классы эквивалентности': 'Это множество значений, которые при тестировании дают одинаковый результат. Необходимо провести хотя бы один тест для одного класса. (Набор значений, которые на тесте дают одинаковый результат)',
    'граничные значения': 'Это проверка значений на минимум/максимум (+/- 1) и значений на границе классов эквивалентности',
    'pairwise':'Метод попарного тестирования',
    'request': 'HTTP запрос. Состоит из: url (max 2048 символов), headers, body',
    'response': 'HTTP ответ. Состоит из: status code, headers, body',
    'идемпотентный': 'HTTP запрос, повторный вызов которого не влияет на бекенд. Идемпотентные методы можно кэшировать.',
    'апи': 'API - способ взаимодействия с некой системой, заложенной в нее создателями с целью интеграции в другие системы.',
    'api': 'API - способ взаимодействия с некой системой, заложенной в нее создателями с целью интеграции в другие системы.',
    'пагинация': 'Структурирование большого объема информации на сайте, путем ее разделения на отдельные страницы. Простыми словами, пагинация — это постраничный вывод данных.',
    'test case':'Четкое описание действий, которые необходимо выполнить для проверки функционала',
    'тест кейс': 'Четкое описание действий, которые необходимо выполнить для проверки функционала',
    'тест дизайн':'Тест дизайн - процесс, который помогает ограничить количество тест-кейсов.',
    'чек-лист': 'Набор всех проверок для текущего релиза',
    'чит-лист': 'Однотипные проверки для элемента',
    'bug magnet':'Расширение для браузера, которое позволяет генерировать сообщения в инпуты',
    'селектор': 'Механизм поиска html элемента на странице',
    'линуксовая консоль': 'Инструмент для управления компьютером и запуска команд. Основные команды: pwd - текущая папка, cd - сменить папку, ls - посмотреть содержимое папки, mkdir - создать новую папку, mv - переместить файл или папку, cp - копировать файл, touch - создать файл (+ расширение)',
    'git': 'Git - система управления версиями. Основные команды: git clone_ссылка_на_репозиторий - скачать репозиторий на компьютер, git pull - спулить себе обновления с origin, git checkout -b "имя новой ветки - создать новую ветку, git checkout "имя ветки на которую переключаемся", git commit -am "название нового коммита" - сохранить текущие изменения, git push - запушить твои изменения, git add - добавить файл, git log - показывает какие файлы изменил, git merge master - вливается свежий мастер в ветку, git status - показывает в какой ветке находишься',
    'agile': 'Правила организации труда в IT коллективе.',
    'sql':'SQL — это структурированный язык запросов, созданный для того, чтобы получать из базы данных необходимую информацию.',
    'ci/cd': 'Философия непрерывной интеграции и доставки',
}


# обработчик команды '/start'
@bot.message_handler(commands=['start'])
def start_command_handler(message: types.Message):
    # отправляем ответ на команду '/start'
    bot.send_message(
        chat_id=message.chat.id, # id чата, в который необходимо направить сообщение
        text='Привет! Это словарь для начинающих тестировщиков. Я помогу тебе расшифровать сложные аббревиатуры и термины 🤓\nВведи интересующий термин, например, регресс', # текст сообщения
    )

# обработчик всех остальных сообщений
@bot.message_handler()
def message_handler(message: types.Message):
    # пробуем найти ключевую фразу в словаре
    definition = DEFINITOINS.get(
        message.text.lower(), # приводим текст сообщения к нижнему регистру
    )
    # если фразы нет в словаре, то переменная definition будет иметь значение None
    # проверяем это условие
    if definition is None:
        # если ключевая фраза не была найдена в словаре
        # отправляем ответ
        bot.send_message(
            chat_id=message.chat.id,
            text='😋 Я пока не знаю такого определения',
        )
        # выходим из функции
        return
    
    # если ключевая фраза была найдена, формируем текст сообщения и отправляем его
    # если перед строкой поставить букву f, то в фигурных скобках {} можно использовать переменные :)
    bot.send_message(
        chat_id=message.chat.id,
        text=f'Определение:\n<code>{definition}</code>',
    )

    bot.send_message(
        chat_id=message.chat.id,
        text=f'Жду следующий термин',
    )


# главная функция программы
def main():
    # запускаем нашего бота
    bot.infinity_polling()


if __name__ == '__main__':
    main()